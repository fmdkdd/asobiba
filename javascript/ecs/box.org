#+OPTIONS: ^:{}
#+PROPERTY: header-args :tangle box.js :comments both

* Axis-aligned bounding boxes
Utilities for testing collisions between axis-aligned bounding boxes.

#+BEGIN_SRC js
  /**
   * Create a box with from the coordinates of its TOP_LEFT corner, its
   * WIDTH and its HEIGHT.
   */
  function box(top_left, width, height) {
    return {x: top_left.x, y: top_left.y, width, height}
  }

  /**
   * Return the center point of BOX.
   */
  function box_center(box) {
    return point(box.x + box.width  / 2,
                 box.y + box.height / 2)
  }

  /**
   * Return all the corners of BOX as an array of points.
   */
  function box_corners(box) {
    return [
      point(box.x, box.y),
      point(box.x + box.width, box.y),
      point(box.x + box.width, box.y + box.height),
      point(box.x, box.y + box.height),
    ]
  }

  /**
   * Return true if and only if POINT lies inside BOX.
   */
  function is_point_inside_box(point, box) {
    return point.x >= box.x && point.x <= box.x + box.width
        && point.y >= box.y && point.y <= box.y + box.height
  }

  /**
   * Return true if and only if BOX1 and BOX2 have some overlap.
   */
  function do_boxes_collide(box1, box2) {
    // Consequence of the Separation Axis Theorem (SAT): if the two boxes overlap,
    // their projections on the two axes overlap as well.  Conversely, if there is
    // a gap in one axis, then the boxes do not overlap.
    return box1.x <= box2.x + box2.width && box1.x + box1.width >= box2.x
        && box1.y <= box2.y + box2.height && box1.y + box1.height >= box2.y
  }
#+END_SRC

* SAT collision detection for convex polygons
:PROPERTIES:
:CUSTOM_ID: SAT
:END:

#+BEGIN_SRC js
/**
 * Return true if convex polygons POLY1 and POLY2 overlap.  Both arguments are
 * arrays of vertices describing the polygons.  The array of vertices is open
 * (i.e., there are as many points in the array as there are sides to the
 * polygon).
 */
function do_polygons_collide(poly1, poly2) {
  // Use the SAT theorem for determining if the two convex polygons collide.
  return no_separation_axis(poly1, poly2) && no_separation_axis(poly2, poly1)
}

/**
 * Return true if there is no separation axis between POLY1 and POLY2, checking
 * only for the axes of POLY1.
 *
 * Used by do_polygons_collide.
 */
function no_separation_axis(poly1, poly2) {
  for (var axis of get_axes(poly1)) {
    var p1 = project(poly1, axis)
    var p2 = project(poly2, axis)
    if (!overlap(p1, p2))
      return false
  }

  return true
}

/**
 * Return the list of axes of POLY used to find a separation axis by
 * no_separation_axis.  The list is returned as an array of vectors.
 */
function get_axes(poly) {
  // For each edge of the polygon, return its normal.

  var axes = []
  for (var i = 0; i < poly.length; ++i) {
    var p0 = poly[i]
    var p1 = poly[(i + 1) % poly.length]
    var edge = vec_minus(p0, p1)
    var normal = vec_unit(vec_perp(edge))
    // We return the normalized axis, though it is only necessary if we wish to
    // find the minimum translation between the polygons.
    axes.push(normal)
  }

  return axes
}

/**
 * Return the interval obtained by projecting POLY onto AXIS.
 * The interval is an object {min, max}.
 */
function project(poly, axis) {
  // To project the polygon onto the axis, dot product each vertex with the
  // axis, and keep the min and max values.

  var min = +Infinity
  var max = -Infinity

  for (var vert of poly) {
    var p = vec_dot(axis, vert)
    if (p < min) min = p
    if (p > max) max = p
  }

  return {min, max}
}

/**
 * Return true if projections PROJ1 and PROJ2 overlap.
 */
function overlap(proj1, proj2) {
  // Compare bounds of interval.  Single axis version of do_boxes_collide.
  return proj1.min <= proj2.max && proj1.max >= proj2.min
}

#+END_SRC

** Hitbox projection
Useful for projecting hitboxes of rotating, moving objects which store their
hitboxes as relative coordinates.

#+BEGIN_SRC js
/**
 * Rotate POLY along ANGLE, then translate it along VEC, and return the result
 * as a new polygon.
 */
function adjust_hitbox(poly, vec, angle) {
  var p = []
  for (var v of poly) {
    p.push(vec_plus(vec_rotate(v, angle), vec))
  }
  return p
}
#+END_SRC

* Spatial hashing
Spatial hashing helps avoiding the exponential complexity of checking all
objects against each other for collisions.  Instead, objects are checked for
collisions only if they reside in the same spatial hash cell.  This is called a
/broad phase collision detection/.

We divide the game area in a grid of cells.  Each object is inserted in all the
cells intersecting with its axis-aligned bounding box.

A cell is a couple of coordinates {x, y}.  All cells have the same size.

Here the area is divided into four cells of same size.  Boxes in cells 1 and 2
cannot collide, so they are not checked for collisions.  Only one test between
the two green boxes is needed, instead of 3.

[[file:img/spatial-hash1.png]]

Choosing the cell size is a compromise: small cells will allocate more memory,
but lookups in each cell will be faster.  However, a global lookup of collisions
through all the cells will not benefit much if objects are duplicated in many
cells.  Large cells may contain too many objects, and thus we may lose the
benefit of spatial hashing.

Ideally objects should appear in the fewest cells possible.  This implies that
cells should be larger than the average object, but not too much.  Assuming the
objects do not deviate wildly from the average, between 1 and 2 times the
average object size is a good value for the cell size.

Positions of objects in the hash are not tracked: clients of the hash should
remove and reinsert objects that move.

Objects that do not move, but can collide, need to be inserted in the hash only
once.

Spatial hashing is best for game areas without wild variations of object
density.  Alternatives that might be better suited to these variations:
quad-trees or r-trees.

#+BEGIN_SRC js
  var emptySet = new Set()

  var spatialHash = {
    new(cellSize) {
      return {
        __proto__: this,
        cellSize,
        map: new Map(),
      }
    },

    /** Return the cell coordinates of POINT. */
    cellFromPoint(point) {
      var x = Math.floor(point.x / this.cellSize)
      var y = Math.floor(point.y / this.cellSize)
      return {x, y}
    },

    /** Return the hash value of CELL, used as a key into the grid map. */
    hashCell(cell) {
      return `${cell.x}%${cell.y}`
    },

    /** Return an array of the cells overlapping with the given axis-aligned
        bounding BOX. */
    cellsIntersectingWith(box) {
      var cells = []
      var start = this.cellFromPoint(point(box.x, box.y))
      var end = this.cellFromPoint({x: box.x + box.width,
                                    y: box.y + box.height})

      for (var x = start.x; x <= end.x; ++x)
        for (var y = start.y; y <= end.y; ++y)
          cells.push({x,y})

      return cells
    },

    insertObjectInCell(obj, cell) {
      var h = this.hashCell(cell)
      if (!this.map.has(h))
        this.map.set(h, new Set())

      this.map.get(h).add(obj)
    },
#+END_SRC

#+RESULTS:

Here the green box overlaps cells 1 and 2, so it has to be inserted into both.
The worst case is the orange box which must be inserted into four cells.

[[file:img/spatial-hash2.png]]

#+BEGIN_SRC js
  /** Insert OBJECT in the grid, based on the coordinates of the axis-aligned
      bounding BOX. */
  insertObjectWithBoundingBox(obj, box) {
        for (var c of this.cellsIntersectingWith(box))
            this.insertObjectInCell(obj, c)
      },
#+END_SRC

#+BEGIN_SRC js
    /** Return the set of objects present in CELL. */
    objectsInCell(cell) {
      return this.map.get(this.hashCell(cell))
             || emptySet
    },

    /** Return the set of objects present in the cell of the grid POINT is
        in. */
    objectsNearPoint(point) {
      return this.map.get(this.hashCell(this.cellFromPoint(point)))
             || emptySet
    },

    /** Return the set of objects present in all the cells overlapping with the
        axis-aligned bounding BOX. */
    objectsNearBoundingBox(box) {
      var objs = new Set()

      for (var c of this.cellsIntersectingWith(box))
        for (var o of this.map.get(this.hashCell(c)))
          objs.add(o)

      return objs
    },

    /** Remove all objects in CELL. */
    clearCell(cell) {
      this.map.get(this.hashCell(cell)).clear()
    },

    /** Remove all objects from the grid.  Cells are not deallocated. */
    clearAllCells() {
      for (var kv of this.map)
        kv[1].clear()
    },

    printStats() {
      var avg = 0
      for (var kv of this.map)
        avg += kv[1].size
      avg /= this.map.size

      console.log('Allocated cells', this.map.size)
      console.log('Average objects per cell', avg)
    }
  }
#+END_SRC

* Vector utilities
These are all straightforward definitions from geometry.

All of these functions do not mutate their arguments.

** Constructors
A vector is a couple of coordinates (x,y) which indicates its displacement from
the origin (0,0).

[[file:img/vector.png]]

We store the coordinates in a JavaScript object with two properties =x= and
=y=.

#+NAME: vector
#+BEGIN_SRC js
  /** Return a vector of coordinates (X,Y). */
  function vector(x, y) { return {x, y}}
#+END_SRC

A point is also a couple of coordinates (x,y).  As such, the constructor is
identical to that of a vector.

The resulting objects are exactly the same, so we can use both constructors
interchangeably.  However, we try use the point constructor when it is more
semantically appropriate (e.g., [[is_point_inside_box][is_point_inside_box]]).

#+NAME: point
#+BEGIN_SRC js
  /** Return a point of coordinates (X,Y). */
  function point(x, y) { return {x, y}}
#+END_SRC

** Adding and subtracting vectors
To add two vectors, add their coordinates.

[[file:img/vec_plus.png]]

This is used for translating a vector, or a point.

#+NAME: vec_plus
#+BEGIN_SRC js
  function vec_plus(u, v) {
    return point(u.x + v.x, u.y + v.y)
  }
#+END_SRC

Subtraction is the same as adding a negated vector.  We redefine it more
directly rather than using [[vec_dot][vec_dot]].

Subtraction is useful for finding the vector between two points, since the
vector from point A to point B is =vec_minus(B,A)=.

#+NAME: vec_minus
#+BEGIN_SRC js
  function vec_minus(u, v) {
    return point(u.x - v.x, u.y - v.y)
  }
#+END_SRC

** Scaling a vector
To scale a vector, multiply each of its coordinates.

[[file:img/vec_mult.png]]

#+NAME: vec_mult
#+BEGIN_SRC js
  function vec_mult(v, s) {
    return point(v.x * s, v.y * s)
  }
#+END_SRC

** TODO Rotating a vector
#+NAME: vec_rotate
#+BEGIN_SRC js
  function vec_rotate(v, a) {
    var cos = Math.cos(a)
    var sin = Math.sin(a)
    return point(v.x * cos - v.y * sin,
                 v.x * sin + v.y * cos)
  }
#+END_SRC

** TODO Dot product
The dot product is defined as:

: length(u) * length(v) * cos(\theta)

where \theta is the angle from u to v.

Two vectors are orthogonal if and only if the dot product is zero.  That’s one
desirable property of the dot product.

The other is that the dot product of u with a unit vector v will give the
projection of u on v.  This is useful for the [[#SAT][SAT algorithm]].

There is also an equivalent algebraic definition as the sum of the product of
each coordinate.  We choose this one for the implementation, as it requires less
operations.

#+NAME: vec_dot
#+BEGIN_SRC js
  function vec_dot(u, v) {
    return u.x * v.x + u.y * v.y
  }
#+END_SRC

** Vector length
Vector length, or magnitude, is the distance between the vector coordinates and
the origin.

To obtain it, we apply Pythagoras’ theorem.

[[file:img/vec_length.png]]

#+NAME: vec_length
#+BEGIN_SRC js
  function vec_length(v) {
    return Math.sqrt(v.x*v.x + v.y*v.y)
  }
#+END_SRC

** Unit vector
Unit vectors are vectors of length 1.  Trivial examples are (0,1) and (1,0).

We /normalize/ a vector when we adjust its magnitude to 1 (without changing its
direction).

To normalize a vector, we scale it by the inverse of its magnitude.

#+NAME: vec_unit
#+BEGIN_SRC js
  function vec_unit(v) {
    var l = vec_length(v)
    return point(v.x / l, v.y / l)
  }
#+END_SRC

We could call [[vec_mult][vec_mult]], but I believe (maybe wrongly) that this is faster.

** Normal vector
Rotating a vector by 90° gives its /normal/ vector, which is perpendicular.

[[file:img/vec_perp.png]]

The normal vector is useful for finding the axis of projection in the [[#SAT][SAT
algorithm]].

As this is a common operation, we do not want to use [[vec_rotate][vec_rotate]].
Instead, we can plug the values of cos and sin for 90°.

: cos(90°) = 0
: sin(90°) = 1

#+NAME: vec_perp
#+BEGIN_SRC js
  function vec_perp(v) {
    return point(-v.y, v.x)
  }
#+END_SRC

* TODO Unit tests
:PROPERTIES:
:header-args:   :tangle tests.js :noweb yes
:END:

** Vectors
#+BEGIN_SRC js
var assert = require('assert')

<<vector>>
<<vec_length>>

assert(vec_length(vector(0,1)) === 0)
#+END_SRC

#+RESULTS:
