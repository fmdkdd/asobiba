# Greatly inspired by this:
# https://stackoverflow.com/a/30142139
#
# Straightforward Makefile that builds everything into the BUILD_DIR, and
# recompiles only what is needed.

# Configurables
CXX := g++
CFLAGS := -std=c++17 -Wall -Wextra -g -O1
BIN := swrender
BUILD_DIR := build

ENABLE_ASSERT := 1

ifeq ($(ENABLE_ASSERT), 1)
CFLAGS += -DENABLE_ASSERT
endif

# Submodule dependencies
INCLUDES := -D_REENTRANT -I/usr/include/SDL2
LIBS := -lm -pthread -lSDL2

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SRC := main.cpp parse_obj.cpp parse_tga.cpp vec.cpp

# Put all objects into the build dir, preserving the SRC hierarchy
OBJ := $(SRC:%.cpp=$(BUILD_DIR)/%.o)
# The .d files are generated by CC, used to rebuild objs whenever any dependency
# changes
DEP := $(OBJ:%.o=%.d)

# Default target: the main binary
.PHONY: all
all: $(BUILD_DIR)/$(BIN)

$(BUILD_DIR)/$(BIN): $(OBJ)
# Create build directories on the way
	@mkdir -p $(@D)
	$(CXX) $^ $(CFLAGS) $(LIBS) -o $@

# Include .d files built by the next rule
-include $(DEP)

$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(@D)
# -MMD generates the .d dependencies on the go
	$(CXX) $< $(CFLAGS) $(INCLUDES) -MMD -c -o $@

.PHONY: clean
clean:
	rm --force $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)
